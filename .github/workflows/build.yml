name: Auto Upload Rock Cloner v2.0

on:
  push:
    branches:
      - windows

jobs:
  release:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Ensure bash environment
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          REPO: ${{ github.repository }}
        run: |
          echo "üì¶ Checking and uploading release v2.0..."

          # Function to safely extract JSON values
          safe_jq() {
            echo "$1" | jq -er "$2" 2>/dev/null || echo ""
          }

          # --- 1Ô∏è‚É£ Try to fetch the existing release
          release_json=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/releases/tags/v2.0")

          release_id=$(safe_jq "$release_json" '.id')

          # --- 2Ô∏è‚É£ If not found, create it
          if [ -z "$release_id" ] || [ "$release_id" = "null" ]; then
            echo "üÜï Creating release v2.0..."
            create_resp=$(curl -s -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              -H "Content-Type: application/json" \
              -d '{"tag_name":"v2.0","name":"Rock Cloner v2.0","body":"Auto-created release","draft":false,"prerelease":false}' \
              "https://api.github.com/repos/$REPO/releases")
            release_id=$(safe_jq "$create_resp" '.id')
          fi

          if [ -z "$release_id" ] || [ "$release_id" = "null" ]; then
            echo "‚ùå Failed to get or create release. Full response below:"
            echo "$release_json"
            exit 1
          fi

          echo "‚úÖ Using release ID: $release_id"

          # --- 3Ô∏è‚É£ Delete old asset if it exists
          asset_id=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/releases/$release_id/assets" | jq -r '.[] | select(.name=="rockclonerv2.zip") | .id')

          if [ -n "$asset_id" ] && [ "$asset_id" != "null" ]; then
            echo "üóëÔ∏è Deleting old rockclonerv2.zip..."
            curl -s -X DELETE \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/$REPO/releases/assets/$asset_id"
          fi

          # --- 4Ô∏è‚É£ Upload new file
          if [ ! -f rockclonerv2.zip ]; then
            echo "‚ùå rockclonerv2.zip not found in repository root!"
            exit 1
          fi

          echo "‚¨ÜÔ∏è Uploading new rockclonerv2.zip..."
          upload_url="https://uploads.github.com/repos/$REPO/releases/$release_id/assets?name=rockclonerv2.zip"

          upload_resp=$(curl -s -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/zip" \
            --data-binary "@rockclonerv2.zip" \
            "$upload_url")

          asset_name=$(safe_jq "$upload_resp" '.name')

          if [ -n "$asset_name" ] && [ "$asset_name" != "null" ]; then
            echo "‚úÖ Upload complete! Asset name: $asset_name"
          else
            echo "‚ö†Ô∏è Upload may have failed. Full response:"
            echo "$upload_resp"
            exit 1
          fi
